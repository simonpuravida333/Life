# Generated by Django 4.1.7 on 2023-08-25 10:30

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClassRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.IntegerField()),
                ('canonicalName', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.IntegerField()),
                ('canonicalName', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Kingdom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.IntegerField()),
                ('canonicalName', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='Occurrence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('basisOfRecord', models.CharField(blank=True, choices=[('Living Speciem', 'Living Speciem'), ('Preserved Specimen', 'Preserved Specimen'), ('Fossil Specimen', 'Fossil Specimen'), ('Material Citation', 'Material Citation'), ('Human Observation', 'Human Observation'), ('Machine Observation', 'Machine Observation')], max_length=64)),
                ('identifiedBy', models.CharField(blank=True, max_length=256)),
                ('recordedBy', models.CharField(blank=True, max_length=256)),
                ('isInCluster', models.BooleanField()),
                ('iucnRedListCategory', models.CharField(choices=[('NE', 'Not evaluated'), ('DD', 'Data deficient'), ('LC', 'Least concern'), ('NT', 'Near threatened'), ('VU', 'Vulnerable'), ('EN', 'Endangered'), ('CR', 'Critically endangered'), ('EX', 'Extinct'), ('EW', 'Extinct in the wild')], max_length=2)),
                ('eventDate', models.CharField(blank=True, max_length=19)),
                ('continent', models.CharField(blank=True, max_length=64)),
                ('country', models.CharField(blank=True, max_length=128)),
                ('countryCode', models.CharField(blank=True, max_length=3)),
                ('locality', models.CharField(blank=True, max_length=512)),
                ('decimalLatitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11)),
                ('decimalLongitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11)),
                ('elevation', models.DecimalField(blank=True, decimal_places=4, max_digits=8)),
            ],
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('canonicalName', models.CharField(max_length=256)),
                ('species', models.CharField(max_length=256)),
                ('key', models.IntegerField(null=True)),
                ('speciesKey', models.IntegerField(null=True)),
                ('nubKey', models.IntegerField(null=True)),
                ('rank', models.CharField(max_length=32)),
                ('synonym', models.BooleanField()),
                ('taxonomicStatus', models.CharField(choices=[('ACCEPTED', 'ACCEPTED'), ('DOUBTFUL', 'DOUBTFUL'), ('HETEROTYPIC SYNONYM', 'HETEROTYPIC SYNONYM'), ('HOMOTYPIC SYNONYM', 'HOMOTYPIC SYNONYM'), ('MISAPPLIED', 'MISAPPLIED'), ('PROPARTE SYNONYM', 'PROPARTE SYNONYM'), ('SYNONYM', 'SYNONYM')], max_length=32)),
                ('nameType', models.CharField(choices=[('BLACKLISTED', 'BLACKLISTED'), ('CANDIDATUS', 'CANDIDATUS'), ('CULTIVAR', 'CULTIVAR'), ('DOUBTFUL', 'DOUBTFUL'), ('HYBRID', 'HYBRID'), ('INFORMAL', 'INFORMAL'), ('NO_NAME', 'NO_NAME'), ('OTU', 'OTU'), ('PLACEHOLDER', 'PLACEHOLDER'), ('SCIENTIFIC', 'SCIENTIFIC'), ('VIRUS', 'VIRUS')], max_length=32)),
                ('parent', models.CharField(max_length=256, null=True)),
                ('parentKey', models.IntegerField(null=True)),
                ('kingdom', models.CharField(max_length=256, null=True)),
                ('phylum', models.CharField(max_length=256, null=True)),
                ('classRank', models.CharField(max_length=256, null=True)),
                ('order', models.CharField(max_length=256, null=True)),
                ('family', models.CharField(max_length=256, null=True)),
                ('genus', models.CharField(max_length=256, null=True)),
                ('kingdomKey', models.IntegerField(null=True)),
                ('phylumKey', models.IntegerField(null=True)),
                ('classRankKey', models.IntegerField(null=True)),
                ('orderKey', models.IntegerField(null=True)),
                ('familyKey', models.IntegerField(null=True)),
                ('genusKey', models.IntegerField(null=True)),
                ('localDjangoDB', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='VernacularName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vernacularName', models.CharField(max_length=256)),
                ('language', models.CharField(max_length=3, null=True)),
                ('preferred', models.BooleanField()),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='life.species')),
            ],
        ),
        migrations.CreateModel(
            name='SynonymName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('canonicalName', models.CharField(max_length=256)),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='life.species')),
            ],
        ),
        migrations.CreateModel(
            name='SpeciesMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.URLField()),
                ('imageFormat', models.CharField(max_length=32, null=True)),
                ('imageType', models.CharField(max_length=32, null=True)),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='life.species')),
            ],
        ),
        migrations.CreateModel(
            name='Phylum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.IntegerField()),
                ('canonicalName', models.CharField(max_length=256)),
                ('kingdom', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='life.kingdom')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.IntegerField()),
                ('canonicalName', models.CharField(max_length=256)),
                ('classRank', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='life.classrank')),
            ],
        ),
        migrations.CreateModel(
            name='OccurrenceMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imageLink', models.URLField()),
                ('occurrence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='life.occurrence')),
            ],
        ),
        migrations.AddField(
            model_name='occurrence',
            name='species',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='life.species'),
        ),
        migrations.CreateModel(
            name='Genus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.IntegerField()),
                ('canonicalName', models.CharField(max_length=256)),
                ('family', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='life.family')),
            ],
        ),
        migrations.AddField(
            model_name='family',
            name='order',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='life.order'),
        ),
        migrations.CreateModel(
            name='Distribution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locality', models.TextField(max_length=2048)),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='life.species')),
            ],
        ),
        migrations.CreateModel(
            name='Description',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(max_length=1048576)),
                ('typeOfDescription', models.CharField(max_length=32)),
                ('language', models.CharField(max_length=3, null=True)),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='life.species')),
            ],
        ),
        migrations.AddField(
            model_name='classrank',
            name='phylum',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='life.phylum'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
